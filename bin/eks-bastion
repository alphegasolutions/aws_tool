#!/usr/bin/env python

import aws_tool
import argparse
import logging
import traceback

logger = logging.getLogger("aws_tool.eks-bastion")

parser = argparse.ArgumentParser(prog='eks-bastion', description='AWS EKS Bastion instance Deployment Tool')
aws_tool.EKSBastionDeployer.set_arg_options(parser)

options = parser.parse_args()

logger.info("command line arguments: {}".format(options) )

aws_tool.EKSClusterDeployer.init(options)
stack_name = aws_tool.EKSBastionDeployer.get_stack_name(options)


if options.action == aws_tool.EKSBastionDeployer.CREATE:

    try:
        logging.info("Creating EKS Bastion instance stack: {}".format(stack_name))
        template_location = options.artifact_location + "/eks-bastion/template.yaml"
        parameter_location = options.artifact_location + "/eks-bastion/parameters.json"

        cf_stack = aws_tool.CFStackTemplate(stack_name=stack_name, template_location=template_location,
                                            parameter_location=parameter_location)
        aws_tool.EKSBastionDeployer.set_stack_options(options, cf_stack)

        result = aws_tool.EKSBastionDeployer.create_instance(cf_stack, options.vpc_stack, options.eks_stack)
        logging.info(result)

    except Exception as ex:
        traceback.print_exc()

elif options.action == aws_tool.EKSBastionDeployer.DELETE:
    logging.info("Deleting EKS Bastion instance stack: {}".format(stack_name))
    aws_tool.EKSBastionDeployer.delete_instance(stack_name)

elif options.action == aws_tool.EKSBastionDeployer.LIST:

    logger.info("Listing Available EKS Bastion instance stacks")
    aws_tool.EKSBastionDeployer.list_instances()

elif options.action == aws_tool.EKSBastionDeployer.FIND:
    logger.info("Finding EKS Bastion instance Stack: " + stack_name)
    aws_tool.EKSBastionDeployer.find_instance(stack_name)
