#!/usr/bin/env python

import aws_tool
import argparse
import logging


ACTION_TYPES = ["CREATE", "LIST", "DELETE"]


def action_type(action):
    action = action.upper()
    if action not in ACTION_TYPES:
        raise argparse.ArgumentError("{} is not a valid deployment type".format(action))

    return action

parser = argparse.ArgumentParser(prog='eks-cluster', description='AWS EKS Tool')
parser.add_argument("--action", help='action type', default="create", type=action_type)
parser.add_argument("--cluster-version", help="EKS Cluster version")
parser.add_argument("--vpc-stack", help="Name of the vpc stack to deploy EKS cluster")
parser.add_argument("--region", help="AWS Region")

aws_tool.AWSSession.add_session_params(parser)


options = parser.parse_args()

aws_session = aws_tool.AWSSession(profile_name=options.profile,
                                  role_arn=options.role_arn,
                                  access_key=options.access_key,
                                  secret_access_key=options.secret_access_key)

stack_name = "{}-eks-{}".format(options.name, options.environment)

cf_tool = aws_tool.CFStackTool(aws_session)
deployer = aws_tool.EKSClusterDeployer()

if options.action == ACTION_TYPES[0]:
    logging.info("Creating EKS Cluster")

    template_location = options.artifact_location + "/eks-cluster/template.yaml"
    parameter_location = options.artifact_location + "/eks-cluster/parameters.json"

    cf_stack = aws_tool.CFStackTemplate(stack_name=stack_name, template_location=template_location, parameter_location=parameter_location)
    cf_stack.set_parameter("ClusterVersion", options.cluster_version)

    cf_tool.validate(cf_stack)

    aws_tool.EKSClusterDeployer.create(cf_stack, options.vpc_stack, cf_tool)


elif options.action == ACTION_TYPES[1]:
    logging.info("Listing EKS Clusters")

elif options.action == ACTION_TYPES[2]:
    logging.info("Deleting EKS Cluster")
