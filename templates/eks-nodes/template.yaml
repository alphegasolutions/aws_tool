---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS Control Plane, Bastion Host and Worker Nodes for Boltlabs Infrastructure'

Metadata:
  LICENSE: Apache License, Version 2.0
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - SubnetIds
      - Label:
          default: Amazon EK2 Control Plane Configuration
        Parameters:
          - ControlPlane
          - ControlPlaneSecurityGroup
          - NodeRole
          - NodeSecurityGroup
      - Label:
          default: Amazon EC2 Linux WorkerNode Configuration
        Parameters:
          - KeyPairName
          - InstanceType
          - AutoScalingGroupMinSize
          - AutoScalingGroupMaxSize
          - AutoScalingGroupDesiredCapacity
          - NodeVolumeSize
          - BootstrapArguments

Parameters:

  VpcId:
    Description: 'The VPC Identifier'
    Type: 'AWS::EC2::VPC::Id'
    
  ControlPlane:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster
    Type: String
  
  ClusterVersion:
    Description: The kubernetes version of the EKS Cluster
    Type: String
    Default: '1.13'
    AllowedValues:
      - '1.11'
      - '1.12'
      - '1.13'
    
  ControlPlaneSecurityGroup:
    Description: The security group for the control plane
    Type: 'AWS::EC2::SecurityGroup::Id'

  NodeRole:
    Description: The service role for the worker nodes
#    Type: 'AWS::IAM::Role'
    Type: String
    
  NodeSecurityGroup:
    Description: The security group for the worker nodes
    Type: 'AWS::EC2::SecurityGroup::Id'
      
  SubnetIds:
    Description: 'The list of SubnetIds in the Virtual Private Cloud (VPC)'
    Type: 'List<AWS::EC2::Subnet::Id>'
    
  KeyPairName:
    Description: The EC2 Key Pair to allow SSH access to the worker node instances
    Type: AWS::EC2::KeyPair::KeyName
    
  InstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.medium
    ConstraintDescription: Must be a valid EC2 instance type
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - p3dn.24xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
        
  AutoScalingGroupMinSize:
    Description: Minimum size of Node Group ASG
    Type: Number
    Default: 1
  
  AutoScalingGroupMaxSize:
    Description: Maximum size of the Node Group ASG. Set to at least 1 greater than AutoScalingGroupDesiredCapacity
    Type: Number
    Default: 2
    
  AutoScalingGroupDesiredCapacity:
    Description: Desired capacity of Node Group ASG
    Type: Number
    Default: 1
    
  NodeVolumeSize:
    Description: Node volume size
    Type: Number
    Default: 20
  
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Type: String
    Default: ""
    
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must exist in the VPC

Conditions:
  Version_11: !Equals 
    - !Ref ClusterVersion
    - '1.11'
  Version_12: !Equals 
    - !Ref ClusterVersion
    - '1.12'

Mappings:

  AWSAMIRegionMap:
    ap-northeast-1:
      AMZNEKS: ami-0fde798d17145fae1
    ap-northeast-2:
      AMZNEKS: ami-07fd7609df6c8e39b
    ap-south-1:
      AMZNEKS: ami-0a9b1c1807b1a40ab
    ap-southeast-1:
      AMZNEKS: ami-0361e14efd56a71c7
    ap-southeast-2:
      AMZNEKS: ami-0237d87bc27daba65
    eu-central-1:
      AMZNEKS: ami-0b7127e7a2a38802a
    eu-north-1:
      AMZNEKS: ami-0fd05922165907b85
    eu-west-1: 
      AMZNEKS: ami-00ac2e6b3cb38a9b9
    eu-west-2:
      AMZNEKS: ami-0147919d2ff9a6ad5
    eu-west-3:
      AMZNEKS: ami-0537ee9329c1628a2
    us-east-1:
      AMZNEKS: ami-0f2e8e5663e16b436
    us-east-2:
      AMZNEKS: ami-0485258c2d1c3608f
    us-west-2:
      AMZNEKS: ami-03a55127c613349a7

  AWSAMIRegionMap12:
    ap-northeast-1:
      AMZNEKS: ami-
    ap-northeast-2:
      AMZNEKS: ami-
    ap-south-1:
      AMZNEKS: ami-
    ap-southeast-1:
      AMZNEKS: ami-
    ap-southeast-2:
      AMZNEKS: ami-
    eu-central-1:
      AMZNEKS: ami-
    eu-north-1:
      AMZNEKS: ami-
    eu-west-1: 
      AMZNEKS: ami-
    eu-west-2:
      AMZNEKS: ami-
    eu-west-3:
      AMZNEKS: ami-
    us-east-1:
      AMZNEKS: ami-0e380e0a62d368837
    us-east-2:
      AMZNEKS: ami-
    us-west-2:
      AMZNEKS: ami-

  AWSAMIRegionMap11:
    ap-northeast-1:
      AMZNEKS: ami-
    ap-northeast-2:
      AMZNEKS: ami-
    ap-south-1:
      AMZNEKS: ami-
    ap-southeast-1:
      AMZNEKS: ami-
    ap-southeast-2:
      AMZNEKS: ami-
    eu-central-1:
      AMZNEKS: ami-
    eu-north-1:
      AMZNEKS: ami-
    eu-west-1: 
      AMZNEKS: ami-
    eu-west-2:
      AMZNEKS: ami-
    eu-west-3:
      AMZNEKS: ami-
    us-east-1:
      AMZNEKS: ami-0a5f5d5b0f6f58199
    us-east-2:
      AMZNEKS: ami-
    us-west-2:
      AMZNEKS: ami-

      
Resources:

  NodeProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
#        - !Ref InstanceRole
        - !Ref NodeRole

#  InstanceRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service: ec2.amazonaws.com
#            Action: sts:AssumeRole
#      Path: "/"
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
#        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
#        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

#  SecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: Security group for all nodes in the cluster
#      VpcId: !Ref VpcId
#      Tags:
#        - Key: !Sub kubernetes.io/cluster/${ControlPlane}
#          Value: owned

#  SecurityGroupIngress:
#    Type: AWS::EC2::SecurityGroupIngress
#    DependsOn: SecurityGroup
#    Properties:
#      Description: Allow node to communicate with each other
#      GroupId: !Ref SecurityGroup
#      SourceSecurityGroupId: !Ref SecurityGroup
#      IpProtocol: "-1"
#      FromPort: 0
#      ToPort: 65535


#  SecurityGroupFromControlPlaneIngress:
#    Type: AWS::EC2::SecurityGroupIngress
#    DependsOn: SecurityGroup
#    Properties:
#      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
#      GroupId: !Ref SecurityGroup
#      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
#      IpProtocol: tcp
#      FromPort: 1025
#      ToPort: 65535

#  ControlPlaneEgressToSecurityGroup:
#    Type: AWS::EC2::SecurityGroupEgress
#    DependsOn: SecurityGroup
#    Properties:
#      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
#      GroupId: !Ref ControlPlaneSecurityGroup
#      DestinationSecurityGroupId: !Ref SecurityGroup
#      IpProtocol: tcp
#      FromPort: 1025
#      ToPort: 65535

#  SecurityGroupFromControlPlaneOn443Ingress:
#    Type: AWS::EC2::SecurityGroupIngress
#    DependsOn: SecurityGroup
#    Properties:
#      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
#      GroupId: !Ref SecurityGroup
#      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
#      IpProtocol: tcp
#      FromPort: 443
#      ToPort: 443

#  ControlPlaneEgressToSecurityGroupOn443:
#    Type: AWS::EC2::SecurityGroupEgress
#    DependsOn: SecurityGroup
#    Properties:
#      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
#      GroupId: !Ref ControlPlaneSecurityGroup
#      DestinationSecurityGroupId: !Ref SecurityGroup
#      IpProtocol: tcp
#      FromPort: 443
#      ToPort: 443

#  ClusterControlPlaneSecurityGroupIngress:
#    Type: AWS::EC2::SecurityGroupIngress
#    DependsOn: SecurityGroup
#    Properties:
#      Description: Allow pods to communicate with the cluster API Server
#      GroupId: !Ref ControlPlaneSecurityGroup
#      SourceSecurityGroupId: !Ref SecurityGroup
#      IpProtocol: tcp
#      ToPort: 443
#      FromPort: 443

  NodeAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref AutoScalingGroupDesiredCapacity
      LaunchConfigurationName: !Ref NodeLaunchConfiguration
      MinSize: !Ref AutoScalingGroupMinSize
      MaxSize: !Ref AutoScalingGroupMaxSize
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub ${ControlPlane}-WorkerNode
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/cluster/${ControlPlane}
          Value: owned
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref AutoScalingGroupDesiredCapacity
        PauseTime: PT5M

  NodeLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodeProfile
      ImageId: !If
        - Version_11
        - !FindInMap [AWSAMIRegionMap11, !Ref 'AWS::Region', AMZNEKS]
        - !If
          - Version_12
          - !FindInMap [AWSAMIRegionMap12, !Ref 'AWS::Region', AMZNEKS]
          - !FindInMap [AWSAMIRegionMap, !Ref 'AWS::Region', AMZNEKS]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
#        - !Ref SecurityGroup
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${ControlPlane} ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeAutoScalingGroup \
                     --region ${AWS::Region}


Outputs:
    
  NodeRole:
    Description: The node instance role
    Value: !Ref NodeRole

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup

